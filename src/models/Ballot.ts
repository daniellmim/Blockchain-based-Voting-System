
import mongoose, { Document, Schema, Model, Types } from 'mongoose';
import type { BallotType as BallotTypeInterface, Choice as ChoiceInterface } from '@/lib/types';

interface IChoiceDocument extends ChoiceInterface, Omit<Document, 'id'> {} // Choice is a subdocument

const ChoiceSchema = new Schema<IChoiceDocument>({
  // id is generated by Mongoose for subdocuments if not specified (_id)
  text: { type: String, required: true, trim: true, maxlength: 100 },
  voteCount: { type: Number, default: 0, min: 0 },
}, {
  // Ensure virtual 'id' for choices
  toJSON: { virtuals: true, getters: true },
  toObject: { virtuals: true, getters: true },
});

// Mongoose virtual for 'id' for subdocuments
ChoiceSchema.virtual('id').get(function(this: IChoiceDocument) {
  return (this._id as Types.ObjectId).toHexString();
});


export interface IBallotDocument extends Omit<BallotTypeInterface, 'id' | 'roomId' | 'choices' | 'votedUserIds'>, Document {
  roomId: Types.ObjectId;
  choices: IChoiceDocument[];
  votedUserIds: Map<string, string | string[]>; // Key: userId (string), Value: choiceId or array of choiceIds
}

const BallotSchema = new Schema<IBallotDocument>(
  {
    roomId: {
      type: Schema.Types.ObjectId,
      ref: 'Room',
      required: true,
    },
    title: {
      type: String,
      required: [true, 'Ballot title is required'],
      trim: true,
      minlength: 3,
      maxlength: 100,
    },
    choices: [ChoiceSchema],
    startTime: { type: Date },
    endTime: { type: Date },
    maxChoicesPerVoter: { type: Number, default: 1, min: 1 },
    votedUserIds: {
      type: Map,
      of: Schema.Types.Mixed, // Can be string or array of strings
      default: new Map(),
    },
  },
  {
    timestamps: true,
    toJSON: { virtuals: true, getters: true },
    toObject: { virtuals: true, getters: true },
  }
);

BallotSchema.virtual('id').get(function (this: IBallotDocument) {
  return (this._id as Types.ObjectId).toHexString();
});

const BallotModel = mongoose.models.Ballot as Model<IBallotDocument> || mongoose.model<IBallotDocument>('Ballot', BallotSchema);
export default BallotModel;
